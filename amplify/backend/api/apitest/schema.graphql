type BotGame @model @auth(rules: [{allow: public}]) {
  id: ID!
  playerId: String
  teams: [String]
  playerTeam: String
  timeoutArray: [AWSJSON]
  User: User @hasOne
}

type TeamData @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  players: [AWSJSON]
  abbreviated: String
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  email: String!
  score: Int
  userId: String
  playersArray: [AWSJSON]
  name: String
  xp: Int
  LiveGames: [Game] @manyToMany(relationName: "UserGame")
  maxLiveGames: Int
  mainTeam: String
  allStarPoints: Int
  hallOfFamePoints: Int
  coins: Int
  wins: Int
  loss: Int
  teamShards: [AWSJSON]
}

type Game @model @auth(rules: [{allow: public}]) {
  id: ID!
  player1Id: String
  player2Id: String
  apiLink: String
  player1Team: String
  player2Team: String
  player2LastActionNumber: Int
  player1LastActionNumber: Int
  matrixRow1: [AWSJSON]
  matrixRow2: [AWSJSON]
  matrixRow3: [AWSJSON]
  matrixRow4: [AWSJSON]
  teams: [String]
  player2Depth: [AWSJSON]
  player1Depth: [AWSJSON]
  timeStart: String
  ended: Boolean!
  started: Boolean!
  users: [User] @manyToMany(relationName: "UserGame")
  player1CheckedIn: Boolean
  player2CheckedIn: Boolean
  timeoutArray: [AWSJSON]
  player1SelectedTiles: [AWSJSON]
  player2SelectedTiles: [AWSJSON]
} 